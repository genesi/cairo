#!/usr/bin/make -f

# list of flavors we build; each gets a builddir, a configure pass (configure
# args are defined below), a build pass, and an install pass
FLAVORS := main udeb

# current flavor we're building; this is only expanded in flavor specific
# targets
current_flavor = $*

# macro to get a value for the current flavor we're building; for example
# when building the main flavor, $(call flavor_get,CFLAGS) will expand to
# main_CFLAGS if it's set or to CFLAGS otherwise; pay attention to not adding
# superflous spaces when for the arguments of $(call ); only some vars can
# be expanded in this way though
flavor_get = $(or $($(current_flavor)_$(1)),$($(1)))

# Supported backends (as of Cairo 1.7.4):
#  (internal) Image
#  xlib       Xlib
#  pdf        PDF
#  ps         PostScript
#  svg        SVG
#
# Experimental and unsupported backends:
#  directfb  DirectFB (requires Build-Depend on libdirectfb-dev (>=0.9.25) )
#  xcb       XCB  (requires Build-Depend on at least libxcb1-dev)
#
# Other platform backends are auto disabled: quartz/OSX, win32/Win32
#
# Features:
# --enable-png  PNG (default enabled)

DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

configure_flags += \
--prefix=/usr \
--mandir=/usr/share/man \
--infodir=/usr/share/info \
--enable-pdf --enable-ps \
--enable-xlib \
--enable-png \
--disable-silent-rules \
--build=$(DEB_BUILD_GNU_TYPE)

ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
configure_flags += --host=$(DEB_HOST_GNU_TYPE)
endif

main_configure_flags += \
$(configure_flags) \
--enable-perf-utils \
--enable-xlib --enable-xcb \
--enable-xlib-xcb \
--enable-svg \
--enable-glesv2 --enable-vg --disable-gl \
--enable-egl --disable-glx

udeb_configure_flags += \
$(configure_flags) \
--disable-perf-utils \
--disable-xcb --disable-xlib-xcb \
--disable-svg \
--disable-glesv2 --disable-vg --disable-gl \
--disable-egl --disable-glx

builddir = $(buildbasedir)/$(current_flavor)
buildbasedir = $(CURDIR)/debian/build

installdir = $(installbasedir)/$(current_flavor)
installbasedir = $(CURDIR)/debian/install

# default CFLAGS; these can be expanded with $(call flavor_get, )
CFLAGS = `dpkg-buildflags --get CFLAGS`
CFLAGS += -Wall
LDFLAGS = `dpkg-buildflags --get LDFLAGS`
CPPFLAGS = `dpkg-buildflags --get CPPFLAGS`

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
main_CFLAGS += $(CFLAGS) -O0
udeb_CFLAGS += $(CFLAGS) -O0
else
main_CFLAGS += $(CFLAGS) -O2 -marm -mtune=cortex-a8 -mfpu=neon
udeb_CFLAGS += $(CFLAGS) -Os -mthumb -mtune=cortex-a8 -mfpu=neon
endif

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
	NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

LDFLAGS += -Wl,-z,defs -Wl,-O1 -Wl,--as-needed

configure-common-stamp:
	dh_testdir
	# Generated by configure and breaks the build if already existing
	-test -r src/cairo-features.h && \
	  mv src/cairo-features.h src/cairo-features.h.orig
	# would be created by autogen.sh but we opencode what it does here
	echo >boilerplate/Makefile.am.features
	echo >src/Makefile.am.features
	touch ChangeLog
	autoreconf -vfi
	patch -Np1 < debian/ltmain_as-needed.patch
	touch $@

configure-stamp-%: configure-common-stamp
	dh_testdir
	mkdir -p $(builddir); \
	cd $(builddir); \
	$(CURDIR)/configure \
		CFLAGS="$(call flavor_get,CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
		CPPFLAGS="$(CPPFLAGS)" \
		$(call flavor_get,configure_flags)
	touch $@

build:
	for f in $(FLAVORS); do \
	    debian/rules build-stamp-$$f; \
	done

build-stamp-%: configure-stamp-%
	dh_testdir
	$(MAKE) -j$(NUMJOBS) -C $(builddir)
	touch $@

clean:
	dh_testdir
	dh_testroot
	[ ! -r src/cairo-features.h.orig ] || mv -f src/cairo-features.h.orig src/cairo-features.h
	rm -f boilerplate/Makefile.am.features src/Makefile.am.features ChangeLog
	[ ! -r configure-common-stamp ] || patch -NRp1 < debian/ltmain_as-needed.patch
	rm -f *-stamp *-stamp-main *-stamp-udeb
	
	rm -f config.cache config.log config.status
	rm -f */config.cache */config.log */config.status
	rm -f conftest* */conftest*
	rm -rf autom4te.cache */autom4te.cache
	
	rm -rf $(buildbasedir) $(installbasedir)
	
	find -name Makefile.in -delete
	rm -f build/compile build/config.guess build/config.sub configure build/configure build/depcomp build/install-sh
	rm -f build/ltmain.sh build/lt*.m4 build/mkinstalldirs build/missing build/aclocal.m4 config.h.in build/config.h.in
	
	dh_clean

install-%: build-stamp-%
	$(MAKE) -C $(builddir) install DESTDIR=$(installdir)
	sed -i "/dependency_libs/ s/'.*'/''/" $(installdir)/usr/lib/*.la

install:
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs
	for f in $(FLAVORS); do \
	    debian/rules install-$$f; \
	done

binary-indep: build install
	dh_testdir
	dh_testroot
	dh_install -i
	dh_installchangelogs -i ChangeLog
	dh_installdocs -i -A NEWS README AUTHORS
	dh_link -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

binary-arch: build install
	dh_testdir
	dh_testroot
	dh_install -s
	dh_installdocs -s -A README NEWS AUTHORS
	dh_installchangelogs -s ChangeLog
	dh_installman -s
	dh_installexamples -s
	dh_link -s
	dh_strip -s --dbg-package=libcairo2-dbg -Nlibcairo2-udeb -Ncairo-perf-utils
	dh_strip -plibcairo2-udeb -pcairo-perf-utils
	dh_compress -s
	dh_fixperms -s
	dh_makeshlibs -plibcairo2 --add-udeb=libcairo2-udeb -V 'libcairo2 (>= 1.12.0)' -- -c4
	dh_makeshlibs -plibcairo-gobject2 -V 'libcairo-gobject2 (>= 1.10.0)' -- -c4
	dh_makeshlibs -plibcairo-script-interpreter2 -V 'libcairo-script-interpreter2 (>= 1.10.0)' -- -c4
	dh_installdeb -s
	dh_shlibdeps -s
	dh_perl -s -v
	dh_gencontrol -s
	dh_md5sums -s
	dh_builddeb -s

binary: binary-indep binary-arch

.PHONY: build clean binary-indep binary-arch binary install clean
